<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.javanos.project.notice.model.dao.NoticeDAO">


	<resultMap
		type="com.javanos.project.notice.model.dto.NoticeDTO"
		id="noticeResultMap">

		<!-- property(DTO 필드 이름) - column(DB테이블의 열 이름) 둘이를 매핑한거임 -->
		<id property="noticeNo" column="NOTICE_NO" />
		<result property="noticeTitle" column="NOTICE_TITLE" />
		<result property="noticeBody" column="NOTICE_BODY" />
		<result property="noticeEnrollDate" column="NOTICE_ENROLL_DATE" />
		<result property="noticeModifyDate" column="NOTICE_MODIFY_DATE" />
		<result property="noticeCount" column="NOTICE_COUNT" />
		<result property="noticeBoardStatus"
			column="NOTICE_BOARD_STATUS" />
		<result property="noticeUserno" column="NOTICE_USER_NO" />
		<association property="noticeWriter"
			resultMap="userResultMap" />
	</resultMap>


	<resultMap type="com.javanos.project.user.model.dto.UserDTO"
		id="userResultMap">
		<!-- property(DTO 필드 이름) - column(DB테이블의 열 이름) 둘이를 매핑한거임 -->
		<id property="userNo" column="USER_NO" />
		<result property="userId" column="USER_ID" />
		<result property="userPwd" column="USER_PWD" />
		<result property="userName" column="USER_NAME" />
		<result property="userNickname" column="USER_NICKNAME" />
		<result property="userEmail" column="USER_EMAIL" />
		<result property="userRole" column="USER_ROLE" />
		<result property="userEnrollDate" column="USER_ENROLL_DATE" />
		<result property="userStatus" column="USER_STATUS" />
		<result property="userStopDate" column="USER_STOP_DATE" />
	</resultMap>



	<!-- 공지사항 전체목록 조회 -->
	<!-- <select id="selectAllNoticeList" resultMap="noticeResultMap"> SELECT 
		/* com.javanos.project.notice.model.dao.NoticeDAO#selectAllNoticeList() */ 
		A.NOTICE_NO, A.NOTICE_TITLE, A.NOTICE_BODY, A.NOTICE_USER_NO, B.USER_NICKNAME, 
		A.NOTICE_ENROLL_DATE, A.NOTICE_COUNT FROM TBL_NOTICE A 공지사항작성자 회원번호 = 로그인회원번호 
		: 공지사항 작성자 닉네임 가져옴 JOIN TBL_USER B ON (A.NOTICE_USER_NO = B.USER_NO) WHERE 
		A.NOTICE_BOARD_STATUS = "Y" 공지사항 상태 'Y'일때만 조회함 ORDER BY A.NOTICE_NO DESC 
		공지사항 정렬 최신순 </select> -->

	<!-- 공지사항 전체목록 조회 (페이징 처리 및 제목, 내용 검색) -->
	<select id="selectAllNoticeList" resultMap="noticeResultMap"
		parameterType="com.javanos.project.common.paging.SelectCriteria">
		SELECT
		A.NOTICE_NO,
		A.NOTICE_TITLE,
		A.NOTICE_BODY,
		A.NOTICE_USER_NO,
		B.USER_NICKNAME,
		A.NOTICE_ENROLL_DATE,
		A.NOTICE_COUNT
		FROM TBL_NOTICE A
		JOIN TBL_USER B ON (A.NOTICE_USER_NO = B.USER_NO)
		<where>
			A.NOTICE_BOARD_STATUS = 'Y' <!-- 공지사항 상태 'Y'일때만 조회함 -->
			<if test="searchValue != null and searchValue != ''">
				<!-- 제목 또는 내용에서 검색 -->
				AND (
				A.NOTICE_TITLE LIKE CONCAT('%', #{searchValue}, '%')
				OR
				A.NOTICE_BODY LIKE CONCAT('%', #{searchValue}, '%')
				)
			</if>
		</where>
		ORDER BY A.NOTICE_NO DESC <!-- 공지사항 정렬 최신순 -->
		LIMIT #{startRow}, #{endRow}
	</select>


	 <!-- 공지사항 전체 개수 조회 -->
    <select id="selectTotalCount" resultType="_int"
            parameterType="hashmap">
        SELECT
        COUNT(*)
        FROM TBL_NOTICE A
        JOIN TBL_USER B ON (A.NOTICE_USER_NO = B.USER_NO)
        <where>
            A.NOTICE_BOARD_STATUS = 'Y'
            <if test="searchCondition == 'title'">
                AND A.NOTICE_TITLE LIKE CONCAT('%', #{searchValue}, '%')
            </if>
            <if test="searchCondition == 'body'">
                AND A.NOTICE_BODY LIKE CONCAT('%', #{searchValue}, '%')
            </if>
            <if test="searchCondition == 'titleAndBody'">
                AND (
                A.NOTICE_TITLE LIKE CONCAT('%', #{searchValue}, '%')
                OR A.NOTICE_BODY LIKE CONCAT('%', #{searchValue}, '%')
                )
            </if>
            <if test="searchCondition == 'writer'">
                AND B.USER_NICKNAME LIKE CONCAT('%', #{searchValue}, '%')
            </if>
        </where>
    </select>

	<!-- 공지사항 신규 작성 -->
	<insert id="insertNotice">
		<!-- 이 쿼리 DAO클래스의 insertNotice() 메소드에서 호출됨을 의미 -->
		INSERT /* com.javanos.project.model.dao.NoticeDAO#insertNotice() */

		<!-- into: tbl_notice에 데이터 삽입할거임 -->
		INTO TBL_NOTICE
		( NOTICE_TITLE,
		NOTICE_BODY,
		NOTICE_USER_NO )

		VALUES
		( #{
		noticeTitle }, #{ noticeBody }, #{ noticeUserno } )
	</insert>



	<!-- 공지사항 조회수 증가 update -->
	<update id="incrementNoticeCount">
		<!-- update: 기존 데이터 변경 / 이 쿼리는 NoticeDAO 클래스의 incrementNoticeCount() 메소드에서 
			호출됨을 의미 -->
		UPDATE /*
		com.ohgiraffers.project.notice.model.dao.NoticeDAO#incrementNoticeCount()
		*/
		<!-- tbl_notice: 업데이트할 테이블의 이름 -->
		TBL_NOTICE
		<!-- set: 업데이트할 열, 값을 지정 -->
		SET NOTICE_COUNT = (SELECT A.COUNT
		FROM (
		<!-- 서브쿼리: 특정 공지사항의 현재 조회수를 가져옴 -->
		SELECT NOTICE_COUNT COUNT
		FROM TBL_NOTICE
		WHERE NOTICE_NO = #{ noticeNo
		}
		) A
		) + 1
		WHERE NOTICE_NO = #{ noticeNo }
	</update>



	<!-- 공지사항 상세정보 조회 -->
	<!-- select / id: 쿼리 호출될때 사용된느 식별자 / resultMap: 쿼리 결과 매핑할 식별자 -->
	<select id="selectNoticeDetail" resultMap="noticeResultMap">
		SELECT
		A.NOTICE_NO
		,
		A.NOTICE_TITLE
		, A.NOTICE_BODY
		, A.NOTICE_USER_NO
		, B.USER_NICKNAME
		,
		A.NOTICE_COUNT
		, A.NOTICE_ENROLL_DATE
		FROM TBL_NOTICE A
		JOIN TBL_USER B
		ON (A.NOTICE_USER_NO = B.USER_NO)
		WHERE A.NOTICE_BOARD_STATUS = 'Y'
		AND
		A.NOTICE_NO = #{ noticeNo }
	</select>



	<!-- 공지사항 수정 쿼리 -->
	<update id="updateNotice"
		parameterType="com.javanos.project.notice.model.dto.NoticeDTO">
		UPDATE TBL_NOTICE
		SET
		NOTICE_TITLE = #{noticeTitle},
		NOTICE_BODY =
		#{noticeBody},
		NOTICE_USER_NO = #{noticeUserno}
		WHERE
		NOTICE_NO =
		#{noticeNo}
	</update>



	<!-- 삭제 쿼리 -->
	<delete id="deleteNotice" parameterType="int">
		<!-- com.javanos.project.notice.model.dao.NoticeDAO#deleteNotice() 메소드에서 
			호출됨을 의미 -->
		DELETE FROM TBL_NOTICE
		WHERE NOTICE_NO = #{noticeNo}
	</delete>



	<!-- 제목 검색 -->
	<select id="searchNoticeByTitle" resultMap="noticeResultMap"
		parameterType="String">
		SELECT
		A.NOTICE_NO,
		A.NOTICE_TITLE,
		A.NOTICE_BODY,
		A.NOTICE_USER_NO,
		B.USER_NICKNAME,
		A.NOTICE_ENROLL_DATE,
		A.NOTICE_COUNT
		FROM TBL_NOTICE A
		JOIN TBL_USER B ON (A.NOTICE_USER_NO = B.USER_NO)
		WHERE
		A.NOTICE_BOARD_STATUS = 'Y' <!-- 공지사항 상태 'Y'일때만 조회함 -->
		AND A.NOTICE_TITLE LIKE CONCAT('%', #{keyword}, '%')
		ORDER BY
		A.NOTICE_NO DESC <!-- 공지사항 정렬 최신순 -->
	</select>



	<!-- 내용 검색 -->
	<select id="searchNoticeByBody" resultMap="noticeResultMap"
		parameterType="String">
		SELECT
		A.NOTICE_NO,
		A.NOTICE_TITLE,
		A.NOTICE_BODY,
		A.NOTICE_USER_NO,
		B.USER_NICKNAME,
		A.NOTICE_ENROLL_DATE,
		A.NOTICE_COUNT
		FROM TBL_NOTICE A
		JOIN TBL_USER B ON (A.NOTICE_USER_NO = B.USER_NO)
		WHERE
		A.NOTICE_BOARD_STATUS = 'Y' <!-- 공지사항 상태 'Y'일때만 조회함 -->
		AND A.NOTICE_BODY LIKE CONCAT('%', #{keyword}, '%')
		ORDER BY
		A.NOTICE_NO DESC <!-- 공지사항 정렬 최신순 -->
	</select>



	<!-- 제목+내용 검색 -->
	<select id="searchNoticeByTitleAndBody"
		resultMap="noticeResultMap" parameterType="String">
		SELECT
		A.NOTICE_NO,
		A.NOTICE_TITLE,
		A.NOTICE_BODY,
		A.NOTICE_USER_NO,
		B.USER_NICKNAME,
		A.NOTICE_ENROLL_DATE,
		A.NOTICE_COUNT
		FROM TBL_NOTICE A
		JOIN TBL_USER B ON
		(A.NOTICE_USER_NO = B.USER_NO)
		WHERE A.NOTICE_BOARD_STATUS = 'Y'
		AND (
		A.NOTICE_TITLE LIKE CONCAT('%', #{keyword}, '%')
		OR A.NOTICE_BODY LIKE
		CONCAT('%', #{keyword}, '%')
		)
		ORDER BY A.NOTICE_NO DESC
	</select>




</mapper>